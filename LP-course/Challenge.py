# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kJ7-TY3RYGZSY-F5L9n9Mi10FfFIfExm
"""

!pip install pyomo
!apt-get install -y -qq glpk-utils

import pyomo.environ as pyo
from pyomo.opt import SolverFactory

# Defining concrete model object
model = pyo.ConcreteModel()

# Sets
model.i = pyo.RangeSet(1,3)
model.j = pyo.RangeSet(1,4)

# Parameters defined with sets
model.S = pyo.Param(model.i, initialize = {1:35,2:50,3:40})
S = model.S
model.D = pyo.Param(model.j, initialize = {1:45,2:20,3:30,4:30})
D = model.D
model.P = pyo.Param(model.i,model.j, initialize ={(1,1):8,(1,2):6,(1,3):10,(1,4):9,(2,1):9,(2,2):12,(2,3):13,(2,4):7,(3,1):14,(3,2):9,(3,3):16,(3,4):5})
P = model.P

# Variables
model.x = pyo.Var(model.i,model.j, within = pyo.NonNegativeReals)
x = model.x

# Objective function
def objective_rule(model):
  return sum(sum(P[i,j]*x[i,j] for i in model.i) for j in model.j)
model.objec = pyo.Objective(rule = objective_rule)

# Constraint
# there is better way to formulate i index in function, with for loop, not like this hardcoding...
def constraint1(model,i):
  return sum(x[1,j] for j in model.j) <= S[1]
model.const1 = pyo.Constraint(rule = constraint1)

def constraint2(model,i):
  return sum(x[2,j] for j in model.j) <= S[2]
model.const2 = pyo.Constraint(rule = constraint2)

def constraint3(model,i):
  return sum(x[3,j] for j in model.j) <= S[3]
model.const3 = pyo.Constraint(rule = constraint3)

def constraint4(model,j):
  return sum(x[i,1] for i in model.i) >= D[1]
def constraint5(model,j):
  return sum(x[i,2] for i in model.i) >= D[2]
model.const5 = pyo.Constraint(rule = constraint5)

def constraint6(model,j):
  return sum(x[i,3] for i in model.i) >= D[3]
model.const6 = pyo.Constraint(rule = constraint6)

def constraint7(model,j):
  return sum(x[i,4] for i in model.i) >= D[4]
model.const7 = pyo.Constraint(rule = constraint7)

Solver = SolverFactory('glpk')
results = Solver.solve(model)

# Show results
print(results)
print('Objective function =',model.objec())
for i in model.i:
  for j in model.j:
    print('Electicity sent from plant', i, 'to the city', j,'is', x[i,j]())

