# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y70F5hDFM6w6WPtTFIQLfCoBg8B0gMBA
"""

!pip install pyomo
!apt-get install -y -qq glpk-utils

import pyomo.environ as pyo
from pyomo.opt import SolverFactory

# Example 1
# Defining the model
model1 = pyo.ConcreteModel()

# Decision variables
model1.x1 = pyo.Var(within = pyo.NonNegativeReals)
x1 = model1.x1
model1.x2 = pyo.Var(within = pyo.NonNegativeReals)
x2 = model1.x2

# Objective function
model1.objective = pyo.Objective(expr = 4*x1 + 3*x2, sense = pyo.maximize)

# Conctraints
model1.constraint1 = pyo.Constraint(expr = x1 + x2 <= 40)
model1.constraint2 = pyo.Constraint(expr = 2*x1 + x2 <= 60)

optm = SolverFactory('glpk')
results = optm.solve(model1)
print(results)
print('objective function = ', model1.objective())
print('x1 variable = ', x1())
print('x2 variable = ', x2())

# Example 2
# Defining the model
model2 = pyo.ConcreteModel()

# Defining index set
model2.N = pyo.Set(initialize = ['Desk','Table','Chair'])

# Parameters
model2.L = pyo.Param(model2.N, initialize = {'Desk':8,'Table':6,'Chair':1})
L = model2.L
model2.F = pyo.Param(model2.N, initialize = {'Desk':4,'Table':2,'Chair':1.5})
F = model2.F
model2.C = pyo.Param(model2.N, initialize = {'Desk':2,'Table':1.5,'Chair':0.5})
C = model2.C
model2.P = pyo.Param(model2.N, initialize = {'Desk':60,'Table':30,'Chair':20})
P = model2.P

# Decision variables
model2.x = pyo.Var(model2.N, within = pyo.NonNegativeReals)

# Objective function
def objective_rule(model2):
  return sum(P[i]*model2.x[i] for i in model2.N)

model2.objective = pyo.Objective(rule = objective_rule, sense = pyo.maximize)

# Constraints
def constraint1(model2,i):
  return sum(L[i]*model2.x[i] for i in model2.N) <= 48

model2.const1 = pyo.Constraint(rule = constraint1 )

def constraint2(model2,i):
  return sum(F[i]*model2.x[i] for i in model2.N) <= 20

model2.const2 = pyo.Constraint(rule = constraint2 )

def constraint3(model2,i):
  return sum(C[i]*model2.x[i] for i in model2.N) <= 8

model2.const3 = pyo.Constraint(rule = constraint3 )

def constraint4(model2,i):
  return model2.x['Table'] <= 5
model2.const4 = pyo.Constraint(rule = constraint4)

# Solving the model
solver = SolverFactory('glpk')
result = solver.solve(model2)

# Showing the values of solution
print(result)
print('Objetive function =', model2.objective())
for i in model2.N:
  print('Number of',i, 'produced =', model2.x[i]())

