# -*- coding: utf-8 -*-
"""challenge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ww8tNEMPTZlGkAUtMbpcQyBmCZcg9vTm
"""

!pip install pyomo
!pip install cplex -q
import pyomo.environ as pyo
from pyomo.opt import SolverFactory
import pandas as pd

model = pyo.ConcreteModel()

model.i = pyo.Set(initialize = ['City1','City2','City3','City4','City5'])
model.j = pyo.Set(initialize = ['City1','City2','City3','City4','City5'])

model.ii = pyo.Set(initialize = ['City2','City3','City4','City5'])

# defining parameters using pandas to load data
C = pd.read_excel('S5P3_Data.xlsx',sheet_name='TSP', header=0, index_col=0, usecols = 'A:F', nrows = 5)

model.x = pyo.Var(model.i, model.j, domain = pyo.Binary)
x = model.x
model.u = pyo.Var(model.i, domain = pyo.NonNegativeReals)
u = model.u

def objective_rule(model):
  return sum(sum(C[i][j] * x[i,j] for i in model.i) for j in model.j)
model.obj = pyo.Objective(rule = objective_rule)

def con1(model,j):
  return sum(x[i,j] for i in model.i) == 1
model.con1  = pyo.Constraint(model.i, rule = con1)

def con2(model,i):
  return sum(x[i,j] for j in model.j) == 1
model.con2  = pyo.Constraint(model.j, rule = con2)

def con3(model,i,j):
  if i != j :
    return u[i] - u[j] + 5 * x[i,j] <= 4
  else:
    return u[i] - u[i] == 0
model.con3 = pyo.Constraint(model.ii,model.ii, rule = con3)

opt = SolverFactory('cplex_direct')
results = opt.solve(model)

print(results)
print("Objective function", model.obj())
for i in model.i:
  for j in model.j:
    print('salesman goes from',i,'to the',j,'=',x[i,j]())

